"""
吃葡萄问题

https://www.1point3acres.com/bbs/thread-745745-2-1.html

有三种葡萄，每种分别有 `a, b, c` 颗，现在有三个人，第一个人只吃第一种和第二种葡萄，第二个人只吃第二种和第三种葡萄，第三个人只吃第一种和第三种葡萄。
现在给你输入 `a, b, c` 三个值，请你适当安排，让三个人吃完所有的葡萄，算法返回吃的最多的人最少要吃多少颗葡萄。

首先来理解一下题目，你怎么做到使得「吃得最多的那个人吃得最少」？
可以这样理解，我们先不管每个人只能吃两种特定葡萄的约束，你怎么让「吃得最多的那个人吃得最少」？
显然，只要平均分就行了，每个人吃 (a+b+c)/3 颗葡萄。即便不能整除，比如说 a+b+c=8，那也要尽可能平均分，就是说一个人吃 2 颗，另两个人吃 3 颗。
综上，「吃得最多的那个人吃得最少」就是让我们尽可能地平均分配，而吃的最多的那个人吃掉的葡萄颗数就是 (a+b+c)/3 向上取整的结果，也就是 (a+b+c+2)/3。
PS：向上取整是一个常用的算法技巧。大部分编程语言中，如果你想计算 M 除以 N，M / N 会向下取整，你想向上取整的话，可以改成 (M+(N-1)) / N。
好了，刚才在讨论简单情况，现在考虑一下如果加上「每个人只能吃特定两种葡萄」的限制，怎么做？
也就是说，每个人只能吃特定两种葡萄，你也要尽可能给三个人平均分配，这样才能使得吃得最多的那个人吃得最少。
这可复杂了，如果用 X, Y, Z 表示这三个人，就会发现他们组成一个三角关系：

"""

class Solution:
    def valid_anagram(self, s1: str, s2: str) -> bool :
        return sorted(s1) == sorted(s2)

def main():
    sol = Solution()
    assert sol.valid_anagram('abc', 'bca') == True, 'fails'

if __name__ == '__main__':
   main()