"""
1332. Remove Palindromic Subsequences
Easy

Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0


Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
"""
"""
String

observation
since there are only two type of characters, the most operation it would take is two, one remove all chars a, then remove all chars b

so it would take 1 steps if it is palindrome, and 2 if not

"""
class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if not s:
            return 0

        def is_palindrome(s) -> str:
            n = len(s)
            return all([s[i] == s[n-1-i] for i in range(n//2)])

        if is_palindrome(s):
            return 1
        else:
            return 2

def main():
    sol = Solution()
    assert sol.removePalindromeSub("ababa") == 1, 'fails'

    assert sol.removePalindromeSub("baabb") == 2, 'fails'

if __name__ == '__main__':
   main()