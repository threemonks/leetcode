"""
389. Find the Difference
Easy

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
Example 3:

Input: s = "a", t = "aa"
Output: "a"
Example 4:

Input: s = "ae", t = "aea"
Output: "a"


Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lower-case English letters.

"""
import collections

"""
Hash Table

Use counter Hash Map to store the count of each char in s, and compare that with t to find the ones with different count

mistakes:
1. there are duplicate chars, so we could be removing a char that is still in s, but just with one less copy of that letter in t
"""


class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        s_counter = dict(collections.Counter(s))
        t_counter = dict(collections.Counter(t))

        for char, count in s_counter.items():
            t_counter[char] -= count

        # now the char left with count > 0 in s is the one being removed from s
        for char, count in t_counter.items():
            if count > 0:
                return char

        return ''


def main():
    sol = Solution()
    assert sol.findTheDifference(s = "abcd", t = "abcde") == 'e', 'fails'
    assert sol.findTheDifference(s = "", t = "y") == 'y', 'fails'
    assert sol.findTheDifference(s = "a", t = "aa") == 'a', 'fails'
    assert sol.findTheDifference(s = "ae", t = "aea") == 'a', 'fails'

if __name__ == '__main__':
   main()